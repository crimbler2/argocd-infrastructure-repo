apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: aws-eks-cluster
  labels:
    provider: aws
    service: eks
    compute: managed
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
spec:
  writeConnectionSecretsToNamespace: crossplane-system
  compositeTypeRef:
    apiVersion: thesis.io/v1alpha1
    kind: XClusterSetup

  patchSets:
    - name: common-parameters
      patches:
        - fromFieldPath: spec.region
          toFieldPath: spec.forProvider.region
        - fromFieldPath: spec.providerConfigRef
          toFieldPath: spec.providerConfigRef.name
          policy:
            fromFieldPath: Required

  resources:
    - name: vpc
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: VPC
        spec:
          forProvider:
            enableDnsSupport: true
            enableDnsHostNames: true
            tags:
              - key: Name
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: spec.vpc-cidrBlock
          toFieldPath: spec.forProvider.cidrBlock
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.tags[0].value
          transforms:
            - type: string
              string:
                fmt: "%s-vpc"

    - name: internetgateway
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: InternetGateway
        spec:
          forProvider:
            vpcIdSelector:
              matchControllerRef: true
            tags:
              - key: Name
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.tags[0].value
          transforms:
            - type: string
              string:
                fmt: "%s-igw"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.labels.type
          transforms:
            - type: string
              string:
                fmt: "%s-igw"

    - name: subnet-public-1
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            visibility: public
            usage: k8s
        spec:
          forProvider:
            mapPublicIpOnLaunch: true
            vpcIdSelector:
              matchControllerRef: true
            tags:
              - key: Name
              - key: kubernetes.io/role/elb
                value: "1"
      patches:
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.name
              - fromFieldPath: spec.subnets.public.name
            strategy: string
            string:
              fmt: "%s-%s-subnet"
          toFieldPath: spec.forProvider.tags[0].value
          policy:
            fromFieldPath: Required
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.name
              - fromFieldPath: spec.subnets.public.name
            strategy: string
            string:
              fmt: "%s-%s-subnet"
          toFieldPath: metadata.labels.type
          policy:
            fromFieldPath: Required
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: spec.subnets.public.cidrBlock
          toFieldPath: spec.forProvider.cidrBlock
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.region
              - fromFieldPath: spec.subnets.public.availabilityZone
            strategy: string
            string:
              fmt: "%s%s"
          toFieldPath: spec.forProvider.availabilityZone
          policy:
            fromFieldPath: Required
        - fromFieldPath: spec.subnets.public.availabilityZone
          toFieldPath: metadata.labels.zone

    - name: subnet-private-1
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            visibility: private
            usage: k8s
        spec:
          forProvider:
            mapPublicIpOnLaunch: false
            vpcIdSelector:
              matchControllerRef: true
            tags:
              - key: Name
              - key: kubernetes.io/role/internal-elb
                value: "1"
      patches:
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.name
              - fromFieldPath: spec.subnets.private-1.name
            strategy: string
            string:
              fmt: "%s-%s-subnet"
          toFieldPath: spec.forProvider.tags[0].value
          policy:
            fromFieldPath: Required
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.name
              - fromFieldPath: spec.subnets.private-1.name
            strategy: string
            string:
              fmt: "%s-%s-subnet"
          toFieldPath: metadata.labels.type
          policy:
            fromFieldPath: Required
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: spec.subnets.private-1.cidrBlock
          toFieldPath: spec.forProvider.cidrBlock
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.region
              - fromFieldPath: spec.subnets.private-1.availabilityZone
            strategy: string
            string:
              fmt: "%s%s"
          toFieldPath: spec.forProvider.availabilityZone
          policy:
            fromFieldPath: Required
        - fromFieldPath: spec.subnets.private-1.availabilityZone
          toFieldPath: metadata.labels.zone

    - name: subnet-private-2
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: Subnet
        metadata:
          labels:
            visibility: private
            usage: k8s
        spec:
          forProvider:
            mapPublicIpOnLaunch: false
            vpcIdSelector:
              matchControllerRef: true
            tags:
              - key: Name
              - key: kubernetes.io/role/internal-elb
                value: "1"
      patches:
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.name
              - fromFieldPath: spec.subnets.private-2.name
            strategy: string
            string:
              fmt: "%s-%s-subnet"
          toFieldPath: spec.forProvider.tags[0].value
          policy:
            fromFieldPath: Required
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.name
              - fromFieldPath: spec.subnets.private-2.name
            strategy: string
            string:
              fmt: "%s-%s-subnet"
          toFieldPath: metadata.labels.type
          policy:
            fromFieldPath: Required
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: spec.subnets.private-2.cidrBlock
          toFieldPath: spec.forProvider.cidrBlock
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: spec.region
              - fromFieldPath: spec.subnets.private-2.availabilityZone
            strategy: string
            string:
              fmt: "%s%s"
          toFieldPath: spec.forProvider.availabilityZone
          policy:
            fromFieldPath: Required
        - fromFieldPath: spec.subnets.private-2.availabilityZone
          toFieldPath: metadata.labels.zone

    - name: elastic-ip
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: Address
        spec:
          forProvider:
            domain: vpc
            tags:
              - key: Name
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.tags[0].value
          transforms:
            - type: string
              string:
                fmt: "%s-ngw-eip"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.labels.type
          transforms:
            - type: string
              string:
                fmt: "%s-ngw-eip"

    - name: natgateway
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: NATGateway
        spec:
          forProvider:
            vpcIdSelector:
              matchControllerRef: true
            subnetIdSelector:
              matchLabels:
                visibility: public
            tags:
              - key: Name
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.tags[0].value
          transforms:
            - type: string
              string:
                fmt: "%s-ngw"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.labels.type
          transforms:
            - type: string
              string:
                fmt: "%s-ngw"
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.name
              - fromFieldPath: spec.subnets.public.name
            strategy: string
            string:
              fmt: "%s-%s-subnet"
          toFieldPath: spec.forProvider.subnetIdSelector.matchLabels.type
          policy:
            fromFieldPath: Required
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.allocationIdSelector.matchLabels.type
          transforms:
            - type: string
              string:
                fmt: "%s-ngw-eip"

    - name: routetable-public
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: RouteTable
        spec:
          forProvider:
            vpcIdSelector:
              matchControllerRef: true
            routes:
              - destinationCidrBlock: 0.0.0.0/0
            associations:
              - subnetIdSelector:
                  matchLabels:
                    visibility: public
            tags:
              - key: Name
      patches:
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.name
            strategy: string
            string:
              fmt: "%s-public-route-table"
          toFieldPath: spec.forProvider.tags[0].value
          policy:
            fromFieldPath: Required
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.routes[0].gatewayIdSelector.matchLabels.type
          transforms:
            - type: string
              string:
                fmt: "%s-igw"
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.name
              - fromFieldPath: spec.subnets.public.name
            strategy: string
            string:
              fmt: "%s-%s-subnet"
          toFieldPath: spec.forProvider.associations[0].subnetIdSelector.matchLabels.type
          policy:
            fromFieldPath: Required
        - type: PatchSet
          patchSetName: common-parameters

    - name: routetable-private-1
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: RouteTable
        spec:
          forProvider:
            vpcIdSelector:
              matchControllerRef: true
            routes:
              - destinationCidrBlock: 0.0.0.0/0
            associations:
              - subnetIdSelector:
                  matchLabels:
                    type: subnet
                    visibility: private
            tags:
              - key: Name
      patches:
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.name
            strategy: string
            string:
              fmt: "%s-private-route-table-1"
          toFieldPath: spec.forProvider.tags[0].value
          policy:
            fromFieldPath: Required
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.routes[0].natGatewayIdSelector.matchLabels.type
          transforms:
            - type: string
              string:
                fmt: "%s-ngw"
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.name
              - fromFieldPath: spec.subnets.private-1.name
            strategy: string
            string:
              fmt: "%s-%s-subnet"
          toFieldPath: spec.forProvider.associations[0].subnetIdSelector.matchLabels.type
          policy:
            fromFieldPath: Required
        - type: PatchSet
          patchSetName: common-parameters

    - name: routetable-private-2
      base:
        apiVersion: ec2.aws.crossplane.io/v1beta1
        kind: RouteTable
        spec:
          forProvider:
            vpcIdSelector:
              matchControllerRef: true
            routes:
              - destinationCidrBlock: 0.0.0.0/0
            associations:
              - subnetIdSelector:
                  matchLabels:
                    visibility: private
            tags:
              - key: Name
      patches:
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.name
            strategy: string
            string:
              fmt: "%s-private-route-table-2"
          toFieldPath: spec.forProvider.tags[0].value
          policy:
            fromFieldPath: Required
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.routes[0].natGatewayIdSelector.matchLabels.type
          transforms:
            - type: string
              string:
                fmt: "%s-ngw"
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.name
              - fromFieldPath: spec.subnets.private-2.name
            strategy: string
            string:
              fmt: "%s-%s-subnet"
          toFieldPath: spec.forProvider.associations[0].subnetIdSelector.matchLabels.type
          policy:
            fromFieldPath: Required
        - type: PatchSet
          patchSetName: common-parameters

    - name: cluster-role
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: Role
        spec:
          forProvider:
            assumeRolePolicyDocument: |
              {
                 "Version": "2012-10-17",
                 "Statement": [
                   {
                     "Effect": "Allow",
                     "Principal": {
                       "Service": "eks.amazonaws.com"
                     },
                     "Action": "sts:AssumeRole"
                   }
                 ]
               }
            tags:
              - key: name
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: metadata.name
          toFieldPath: metadata.labels.role
          transforms:
            - type: string
              string:
                fmt: "%s-cluster-role"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-cluster-role"
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.tags[0].value
          transforms:
            - type: string
              string:
                fmt: "%s-cluster-role"

    - name: cluster-policy
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
            roleNameSelector:
              matchControllerRef: true
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.roleNameSelector.matchLabels.role
          transforms:
            - type: string
              string:
                fmt: "%s-cluster-role"

    - name: eks-cluster
      base:
        apiVersion: eks.aws.crossplane.io/v1beta1
        kind: Cluster
        spec:
          forProvider:
            resourcesVpcConfig:
              endpointPrivateAccess: false
              endpointPublicAccess: true
              subnetIdSelector:
                matchLabels:
                  usage: k8s
            roleArnSelector:
              matchControllerRef: true
          writeConnectionSecretToRef:
            namespace: crossplane-system
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: spec.k8s-version
          toFieldPath: spec.forProvider.version
        - fromFieldPath: metadata.name
          toFieldPath: metadata.labels.type
          transforms:
            - type: string
              string:
                fmt: "%s-cluster"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.annotations[crossplane.io/external-name]
          transforms:
            - type: string
              string:
                fmt: "%s-cluster"
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.roleArnSelector.matchLabels.role
          transforms:
            - type: string
              string:
                fmt: "%s-cluster-role"
        - fromFieldPath: metadata.name
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-cluster-connection"
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.certificateAuthorityData
          toFieldPath: metadata.annotations.clusterCertificateAuthorityData
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.endpoint
          toFieldPath: metadata.annotations.clusterEndpoint


      connectionDetails:
        - name: cluster-ca
          fromConnectionSecretKey: clusterCA
        - name: apiserver-endpoint
          fromConnectionSecretKey: endpoint
        - name: value
          fromConnectionSecretKey: kubeconfig

    - name: eks-nodegroup
      base:
        apiVersion: eks.aws.crossplane.io/v1alpha1
        kind: NodeGroup
        spec:
          forProvider:
            instanceTypes:
              - t2.small
            scalingConfig:
              minSize: 1
            subnetSelector:
              matchLabels:
                usage: k8s
                visibility: private
            clusterNameSelector:
              matchControllerRef: true
            nodeRoleSelector:
              matchControllerRef: true
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.nodeRoleSelector.matchLabels.role
          transforms:
            - type: string
              string:
                fmt: "%s-cluster-role"
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.nodeRoleSelector.matchLabels.role
          transforms:
            - type: string
              string:
                fmt: "%s-node-role"
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.clusterNameSelector.matchLabels.type
          transforms:
            - type: string
              string:
                fmt: "%s-cluster"
        - fromFieldPath: spec.k8s-version
          toFieldPath: spec.forProvider.version
        - fromFieldPath: spec.workers-size
          toFieldPath: spec.forProvider.scalingConfig.desiredSize
        - fromFieldPath: spec.workers-size
          toFieldPath: spec.forProvider.scalingConfig.maxSize
        - fromFieldPath: spec.workload-type
          toFieldPath: spec.forProvider.amiType
          transforms:
            - type: map
              map:
                gpu: AL2_x86_64_GPU
                non-gpu: AL2_x86_64

    - name: node-role
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: Role
        spec:
          forProvider:
            assumeRolePolicyDocument: |
              {
                 "Version": "2012-10-17",
                 "Statement": [
                   {
                     "Effect": "Allow",
                     "Principal": {
                       "Service": "ec2.amazonaws.com"
                     },
                     "Action": "sts:AssumeRole"
                   }
                 ]
               }
            tags:
              - key: name
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: metadata.name
          toFieldPath: metadata.labels.role
          transforms:
            - type: string
              string:
                fmt: "%s-node-role"
        - fromFieldPath: metadata.name
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-node-role"
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.tags[0].value
          transforms:
            - type: string
              string:
                fmt: "%s-node-role"

    - name: node-role-worker-policy
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
            roleNameSelector:
              matchControllerRef: true
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.roleNameSelector.matchLabels.role
          transforms:
            - type: string
              string:
                fmt: "%s-node-role"

    - name: node-role-cni-policy
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
            roleNameSelector:
              matchControllerRef: true
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.roleNameSelector.matchLabels.role
          transforms:
            - type: string
              string:
                fmt: "%s-node-role"

    - name: node-role-ecr-policy
      base:
        apiVersion: iam.aws.crossplane.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
            roleNameSelector:
              matchControllerRef: true
      patches:
        - type: PatchSet
          patchSetName: common-parameters
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.roleNameSelector.matchLabels.role
          transforms:
            - type: string
              string:
                fmt: "%s-node-role"

    - name: argocd-secret
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: v1
              kind: Secret
              metadata:
                namespace: argocd-system
                labels:
                  argocd.argoproj.io/secret-type: cluster
              type: Opaque
          providerConfigRef:
            name: kubernetes-provider-config
      patches:
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.manifest.metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-argocd-cluster-secret"
        - fromFieldPath: metadata.name
          toFieldPath: spec.forProvider.manifest.data.name
          transforms:
            - type: string
              string:
                fmt: "%s-cluster"
            - type: string
              string:
                type: Convert
                convert: ToBase64
        - fromFieldPath: metadata.annotations.clusterEndpoint
          toFieldPath: spec.forProvider.manifest.data.server
          transforms:
            - type: string
              string:
                type: Convert
                convert: ToBase64
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: metadata.annotations.clusterCertificateAuthorityData
              - fromFieldPath: metadata.name
            strategy: string
            string:
              fmt: |
                {
                  "tlsClientConfig":{
                    "insecure":false,
                    "caData":"%s"
                  },
                  "awsAuthConfig":{
                    "clusterName":"%s-cluster",
                    "roleARN":"arn:aws:iam::843588259092:role/dev-thesis-sa"
                  }
                }
          toFieldPath: spec.forProvider.manifest.data.config
          transforms:
            - type: string
              string:
                type: Convert
                convert: ToBase64